{"id":3556,"name":"Tehnike programiranja (2015\/2016), Zada\u0107a 5, zadatak 2","language":"C++","required_compiler":"g++","preferred_compiler":"g++","compiler_features":[],"compiler_options":"-std=c++11 -O1 -Wall -Wuninitialized -Winit-self -Wfloat-equal -Wno-sign-compare -Werror=implicit-function-declaration -Werror=vla -pedantic -lm -pass-exit-codes","compiler_options_debug":"-std=c++11 -ggdb -lm -pass-exit-codes","compile":"true","run":"false","test":"true","debug":"true","profile":"true","test_specifications":[{"id":3557,"require_symbols":[],"replace_symbols":[],"code":"    {\/\/AT1 (javni): jednostavni AT\n        VelikiBroj aaa (\"10\"), bbb (\"200\");\n        std::cout << aaa << \" + \" << bbb;\n        auto e = aaa + bbb;\n        std::cout << \" = \" << e;\n    }","global_above_main":"","global_top":"","running_params":{"timeout":"10","vmem":"1000000","stdin":""},"expected":["10 + 200 = 210"],"expected_exception":"false","expected_crash":"false","ignore_whitespace":"false","regex":"false","substring":"false"},{"id":3558,"require_symbols":[],"replace_symbols":[],"code":"    {\/\/AT2 (javni): jednostavni AT, test relacionog operatora\n        VelikiBroj eee (\"1234\"), vvv (\"1243\");\n        auto ev = eee < vvv;\n        auto ve = vvv < eee;\n        auto pp = vvv - eee;\n        std::cout << std::boolalpha << ev << \" \" << ve << \" \" << pp;\n    }\/\/true false 9","global_above_main":"","global_top":"","running_params":{"timeout":"10","vmem":"1000000","stdin":""},"expected":["true false 9"],"expected_exception":"false","expected_crash":"false","ignore_whitespace":"false","regex":"false","substring":"false"},{"id":3559,"require_symbols":[],"replace_symbols":[],"code":"    {\/\/AT3 (javni): jednostavni AT, test postfiksnog ++\n        VelikiBroj a (\"10\");\n        a++;\n        VelikiBroj b (\"9\");\n        b++;\n        std::cout << a << \" \" << b << \" \";\n        auto p = a == b;\n        std::cout << p;\n    }\/\/11 10 0","global_above_main":"","global_top":"","running_params":{"timeout":"10","vmem":"1000000","stdin":""},"expected":["11 10 0"],"expected_exception":"false","expected_crash":"false","ignore_whitespace":"false","regex":"false","substring":"false"},{"id":3560,"require_symbols":[],"replace_symbols":[],"code":"{\/\/AT5, dijeljenje, test 1. 'a' ima 715 a 'b' 517 cifara\n    const char * const ca = \"99999912319999999999999292929495654732123456785678\"\n    \"99999912319999999999999292929495654732123456782345654334565434565434534543\"\n    \"12439912319999999999999292929495654732123456782345654334565434565434534323\"\n    \"78098765412345678876543456789098768909876545678909876543456789987654345673\"\n    \"12345678998765432345678909876543456789876543234567899876543212345678987654\"\n    \"12439912319999999999999292929495654732123456782345654334565434565434534323\"\n    \"78098765412345678876543456789098768909876545678909876543456789987654345673\"\n    \"99999912319999999999999292929495654732123456782345654334565434565434534543\"\n    \"78098765412345678876543456789098768909876545678909876543456789987654345673\"\n    \"1234567899876543234567890987654345678987654323456789987654321234567898754\";\n    const char * const cb = \n    \"45678987654356789876543245678987654323456789765432123456789876543234567654\"\n    \"45678987654356789876543245678987654323456789765432123456789876543234567654\"\n    \"45678987654356789876543245678987654323456789765432123456789876543234567654\"\n    \"45678987654356789876543245678987654323456789765432123456789876543234567654\"\n    \"12345678998765432345678909876543456789876543234567899876543212345678987654\"\n    \"12439912319999999999999292929495654732123456782345654334565434565434534323\"\n    \"7809876541234567887654345678909876890987654567890987654345678998765434567\";\n    \n    \/\/ovaj autotest testira da li ste koliko-toliko efikasno radili dijeljenje\n    \/\/brojeva. treba raditi \"skolski\", a nikako dijeljenje raditi preko oduzimanja\n    \/\/svi ostali autotestovi su slicni (brojevi su ove velicine)\n    \/\/kod mene je NAIVNA implementacija dijeljenja (skolska) i na c9 je izvrsavanje\n    \/\/oko 1.5 sekundi (na c9 autotestovima je 0.03s a na mom racunaru 0.19s).\n    \/\/Vase neka bude 5-6 puta sporije (to je OOOGROMNOOO),\n    \/\/prihvatljivo je\n    \n    \/\/ovako mozete mjeriti vrijeme izvrsavanja :D\n    clock_t poc = std::clock();\n    \n    VelikiBroj a (ca), b (cb);\n    VelikiBroj k = a \/ b;\n    std::cout << \"f: \" << k;\n    \n    clock_t kraj = std::clock();\n    double proslo = double(kraj - poc) \/ CLOCKS_PER_SEC;\n    std::cout << std::endl << \"Vrijeme izvrsavanja: \" << proslo << \"s\" << std::endl;\n}","global_above_main":"#include <ctime>","global_top":"","running_params":{"timeout":"10","vmem":"1000000","stdin":""},"expected":["f: 2189188453051502027101056834030304891412599568952887020455515873205258584368862492415779441000986627940237401417605866317158565456271408530618866063824951036706377898950160387192571408815033591267493\\nVrijeme izvrsavanja: "],"expected_exception":"false","expected_crash":"false","ignore_whitespace":"false","regex":"false","substring":"true"},{"id":3561,"require_symbols":[],"replace_symbols":[],"code":"{\/\/AT6 (javni): testiranje operatora == i >\n    VelikiBroj a(\"20\"), b (\"020\"), c (\"0020\"), d (\"00200\"), e (\"000000000000020\");\n    std::cout << std::boolalpha \n             << \"a == a: \" << (a == a) << std::endl\n             << \"a == b: \" << (a == b) << std::endl\n             << \"a == c: \" << (a == c) << std::endl\n             << \"a == d: \" << (a == d) << std::endl\n             << \"a == e: \" << (a == e) << std::endl\n             << \"e == c: \" << (e == c);\n}","global_above_main":"","global_top":"","running_params":{"timeout":"10","vmem":"1000000","stdin":""},"expected":["a == a: true\\na == b: true\\na == c: true\\na == d: false\\na == e: true\\ne == c: true"],"expected_exception":"false","expected_crash":"false","ignore_whitespace":"false","regex":"false","substring":"false"},{"id":3562,"require_symbols":[],"replace_symbols":[],"code":"{\/\/AT7 (javni): mnozenje\n   \n    const char * const ca = \"99999912319999999999999292929495654732123456785678\"\n    \"99999912319999999999999292929495654732123456782345654334565434565434534543\"\n    \"12439912319999999999999292929495654732123456782345654334565434565434534323\"\n    \"78098765412345678876543456789098768909876545678909876543456789987654345673\"\n    \"12345678998765432345678909876543456789876543234567899876543212345678987654\"\n    \"12439912319999999999999292929495654732123456782345654334565434565434534323\"\n    \"78098765412345678876543456789098768909876545678909876543456789987654345673\"\n    \"99999912319999999999999292929495654732123456782345654334565434565434534543\"\n    \"78098765412345678876543456789098768909876545678909876543456789987654345673\"\n    \"1234567899876543234567890987654345678987654323456789987654321234567898754\";\n    const char * const cb = \n    \"45678987654356789876543245678987654323456789765432123456789876543234567654\"\n    \"99999912319999999999999292929495654732123456782345654334565434565434534543\"\n    \"45678987654356789876543245678987654323456789765432123456789876543234567654\"\n    \"45678987654356789876543245678987654323456789765432123456789876543234567654\"\n    \"45678987654356789876543245678987654323456789765432123456789876543234567654\"\n    \"12345678998765432345678909876543456789876543234567899876543212345678987654\"\n    \"12439912319999999999999292929495654732123456782345654334565434565434534323\"\n    \"7809876541234567887654345678909876890987654567890987654345678998765434567\";\n    \n    clock_t poc = std::clock();\n    \n    VelikiBroj a (ca), b (cb);\n    VelikiBroj k = a * b;\n    \n    \n    clock_t kraj = std::clock();\n    double proslo = double(kraj - poc) \/ CLOCKS_PER_SEC;\n    std::cout << \"f: \" << k;\n    std::cout << std::endl << \"Vrijeme izvrsavanja: \" << proslo << \"s\" << std::endl;\n}","global_above_main":"#include <ctime>","global_top":"","running_params":{"timeout":"10","vmem":"1000000","stdin":""},"expected":["f: 4567894760302041453650955894322145551387864002850136193732437105882112625267670984499124412452051243475571390540500030933299106779129792169374668081436492682566649400734728405964427017200197059086947565950535106820770636956866004634601581348445377949023306743359549026794141905677316805687388965820366531176153618394274770308531168113880808477497344825523890777969585691750243690178926210601774823277470068527200435175363324655115868348968802327510010525944331298916652829618786406890945134860327795727984110249667627590579243140667578239770677734110150625558794933903647979861045714990432245389066324547910164655550034640791962230122819066964305894527104281244750026446544762260908230595079678114113080713200774279154377895828317928528401624089599463422660990642097722659882290641852693128361618514839489741382794120065551603709888168125088129100592863742121429540172593970745334159405466280831080213715366646372801570017884919600765423026327329130766686526870418284208722916935958690810488192856513931523291380664284083112753776341098044445071810942215665417642630726125469049387362205510631960192271958195220470104940823108388828323871516943883681657934591207490926487471592056560105075417514192005210041464960729369082125710572868306719756368372479173960321568418420381349454681658040108553506867829518\\nVrijeme izvrsavanja: "],"expected_exception":"false","expected_crash":"false","ignore_whitespace":"false","regex":"false","substring":"true"},{"id":3563,"require_symbols":[],"replace_symbols":[],"code":"{\/\/AT8 (javni): modulo\n \/\/usput, provjerite kako je moguce kreirati objekte tipa VelikiBroj\n \/\/pisajuci samo literale tipa \"123\"_vb ili 23_vb. Da bismo to mogli pisati\n \/\/potrebno je definirati operator koji se naziva \"user-defined literal\"\n \/\/to je operator koji je uveden tek u C++11, ima sintaksu:\n \/\/\n \/\/ TIP operator \"\" _sufiks (iz_kojeg_literala_kreira_TIP [, velicina]) {...}\n \/\/\n \/\/ (kod nekih tipova potrebna je i duzina, kod nekih ne...)\n \/\/pogledati globalni opseg za konkretne primjere za VelikiBroj\n \/\/nazalost, u C++11 ovi literali\/sufksi, MORAJU da pocnu sa donjom crtom (_)\n \/\/ali od C++14 i dalje, to ogranicenje je otklonjeno za korisnicki definisane\n \/\/literale.\n \/\/dalje, ovo NIJE radjeno na TP predavanjima (zbog nedostatka prostora)\n \/\/ali je fino nauciti nesto jako korisno :)\n \/\/kod nas je sufiks \"_vb\", skracenica za VisualBasic.. ofc not, nego VelikiBroj\n \/\/\n \/\/\n \/\/[PS. ovaj autotest ce NAMJERNO biti pogresan (razlikovat ce se ispis u samo\n \/\/ jednom znaku). Razlog? Pa da pogledate autotest i procitate ovaj komentar, \n \/\/ posto neki studenti ne pogledaju autotestove ako su uspjesni, ako vam je\n \/\/razlika u ispisu samo taj znak, to bi znacilo da vam je program tacan, zar ne?\n \/\/naravno da NE, nego da program \"radi\" za taj specifican slucaj, ostalo se ne zna :P ]\n \n \n \/\/evo prve primjene :)\n \nstd::cout << \"Pogledajte komentar i globalni opseg za ovaj autotest :D\" << std::endl;\nstd::cout << \"234567898765432346789098765676868643234567654334535\"_vb % 2345545_vb;\n    \nclock_t poc = std::clock();\n\nstd::cout << std::endl << std::endl <<\n\"923450987654321234567898765432345678765432345678765477777777777777777787687687\"\n\"456348756348756342875634287956348756349534576348563458734265834795634875634879\"\n\"435734658763458734265873465879345634287568342765873456873456348795634587968754\"\n\"534205870874589342758093475893475340895734895734289573489573489570348957348950\"\n\"102938470129834721038947103294871029348710293847120938471209384791328047384793\"\n\"934871032948723091857563487026809321725813274632456325870932658913274328923\"_vb\n                                    %\n\"734856348756348756324875634879563458763458763485763485734658734658734658793465\"\n\"587356347534757346573485687346587345634879563487563487563487956348756345879687\"\n\"34876587346538745687345634875634587634587634587346587346589347568934756348\"_vb;\n\nstd::cout << std::endl << std::endl <<\n67233246_vb % \"7346123874623875632187632486321587634587625876328746879326532834\"\n              \"334535346456546754645345345345345345345345346456546546346563\"_vb;    \n\n\nclock_t kraj = std::clock();\ndouble proslo = double(kraj - poc) \/ CLOCKS_PER_SEC;\nstd::cout << std::endl << \"Vrijeme izvrsavanja: \" << proslo << \"s\" << std::endl;\n}","global_above_main":"#include <ctime>\n\/\/user-defined literals operatori! omogucavaju 123_vb ili \"1234\"_vb da se tretira kao Veliki broj\nVelikiBroj operator \"\" _vb (unsigned long long int x) {return x;}\nVelikiBroj operator \"\" _vb (const char * x, size_t vel) {return x;}","global_top":"","running_params":{"timeout":"10","vmem":"1000000","stdin":""},"expected":["Pogledajte komentar i globalni opseg za ovaj autotest :)\\n2300155\\n\\n69748812297096872756292354287099332191792845091584615804352389381006459018585531560644922648689033137200700115390965839509106843941334002028024248209742001405998598409153033973030146007993307298371193859907119622687713569364493275\\n\\n67233246\\nVrijeme izvrsavanja: "],"expected_exception":"false","expected_crash":"false","ignore_whitespace":"false","regex":"false","substring":"true"},{"id":3564,"require_symbols":[],"replace_symbols":[],"code":"    \/\/#include <iomanip>\n    {\/\/AT11 (javni) %=\n      \/\/napomena: trebate operator << uraditi tako da bas radi\n      \/\/ispis identican ispisu cijelih brojeva! bas kao u ovom\n      \/\/autotestu, lijevo\/desno poravnanje...\n        auto VB = \"343253453453453243543423432423423432432432434444\"\n        \"5352347856347856348756348756348756348756345873465873465874\"\n        \"3243253453245234324324343434343435777777777777777565667777\"\n        \"2354324324324324324324324324324324324324324324234234324324\"\n        \"5352347856347856348756348756348756348756345873465873465874\"\n        \"345345345432423543253243242432534534534343244343324324\"_vb;\n        VB %= \"343253453453453243543423432423423432432432434444\"\n        \"5352347856347856348756348756348756348756345873465873465874\"\n        \"3243253453245234324324343434343435777777777777777565667777\"\n        \"2354324324324324324324324324324324324324324324234234324324\"\n        \"5352347856347856348756348756348756348756345873465873465874\"\n        \"345345345432423543253243242432534534534343\";\n        std::cout << \"VB: '\" << std::setw (40) << std::right << VB << \"'\" << std::endl;\n        std::cout << \"VB: '\" << std::setw (40) << std::left  << VB << \"'\" << std::endl;\n    }","global_above_main":"#include <iomanip>\nVelikiBroj operator \"\" _vb (unsigned long long x) {return x;}\nVelikiBroj operator \"\" _vb (const char * const x, size_t) {return x;}","global_top":"","running_params":{"timeout":"10","vmem":"1000000","stdin":""},"expected":["VB: '                            244343324324'\\nVB: '244343324324                            '"],"expected_exception":"false","expected_crash":"false","ignore_whitespace":"false","regex":"false","substring":"false"},{"id":3565,"require_symbols":[],"replace_symbols":[],"code":"    {\/\/AT4 (javni): test sabiranja, 1\n        VelikiBroj a (123), b (\"321\"), c (\"0\"), d (\"12340\");\n        std::cout << \"a + a: \" << a + a << std::endl\n                  << \"a + b: \" << a + b << std::endl\n                  << \"a + c: \" << a + c << std::endl\n                  << \"a + d: \" << a + d << std::endl\n                  << \"b + a: \" << b + a << std::endl\n                  << \"b + b: \" << b + b << std::endl\n                  << \"b + c: \" << b + c << std::endl\n                  << \"b + d: \" << b + d << std::endl\n                  << \"c + a: \" << c + a << std::endl\n                  << \"c + b: \" << c + b << std::endl\n                  << \"c + c: \" << c + c << std::endl\n                  << \"c + d: \" << c + d << std::endl\n                  << \"d + a: \" << d + a << std::endl\n                  << \"d + b: \" << d + b << std::endl\n                  << \"d + c: \" << d + c << std::endl\n                  << \"d + d: \" << d + d;\n    }","global_above_main":"","global_top":"","running_params":{"timeout":"10","vmem":"1000000","stdin":""},"expected":["a + a: 246\\na + b: 444\\na + c: 123\\na + d: 12463\\nb + a: 444\\nb + b: 642\\nb + c: 321\\nb + d: 12661\\nc + a: 123\\nc + b: 321\\nc + c: 0\\nc + d: 12340\\nd + a: 12463\\nd + b: 12661\\nd + c: 12340\\nd + d: 24680"],"expected_exception":"false","expected_crash":"false","ignore_whitespace":"false","regex":"false","substring":"false"},{"id":3566,"require_symbols":[],"replace_symbols":[],"code":"    {\/\/AT9 (javni): -\n    const char * const ca = \"99999912319999999999999292929495654732123456785678\"\n    \"99999912319999999999999292929495654732123456782345654334565434565434534543\"\n    \"12439912319999999999999292929495654732123456782345654334565434565434534323\"\n    \"78098765412345678876543456789098768909876545678909876543456789987654345673\"\n    \"12345678998765432345678909876543456789876543234567899876543212345678987654\"\n    \"12439912319999999999999292929495654732123456782345654334565434565434534323\"\n    \"78098765412345678876543456789098768909876545678909876543456789987654345673\"\n    \"12345678998765432345678909876543456789876543234567899876543212345678987654\"\n    \"12439912319999999999999292929495654732123456782345654334565434565434534323\"\n    \"78098765412345678876543456789098768909876545678909876543456789987654345673\"\n    \"99999912319999999999999292929495654732123456782345654334565434565434534543\"\n    \"78098765412345678876543456789098768909876545678909876543456789987654345673\"\n    \"78098765412345678876543456789098768909876545678909876543456789987654345673\"\n    \"12345678998765432345678909876543456789876543234567899876543212345678987654\"\n    \"12439912319999999999999292929495654732123456782345654334565434565434534323\"\n    \"78098765412345678876543456789098768909876545678909876543456789987654345673\"\n    \"99999912319999999999999292929495654732123456782345654334565434565434534543\"\n    \"78098765412345678876543456789098768909876545678909876543456789987654345673\"\n    \"78098765412345678876543456789098768909876545678909876543456789987654345673\"\n    \"99999912319999999999999292929495654732123456782345654334565434565434534543\"\n    \"12345678998765432345678909876543456789876543234567899876543212345678987654\"\n    \"12439912319999999999999292929495654732123456782345654334565434565434534323\"\n    \"78098765412345678876543456789098768909876545678909876543456789987654345673\"\n    \"99999912319999999999999292929495654732123456782345654334565434565434534543\"\n    \"78098765412345678876543456789098768909876545678909876543456789987654345673\"\n    \"78098765412345678876543456789098768909876545678909876543456789987654345673\"\n    \"12345678998765432345678909876543456789876543234567899876543212345678987654\"\n    \"12439912319999999999999292929495654732123456782345654334565434565434534323\"\n    \"78098765412345678876543456789098768909876545678909876543456789987654345673\"\n    \"99999912319999999999999292929495654732123456782345654334565434565434534543\"\n    \"78098765412345678876543456789098768909876545678909876543456789987654345673\"\n    \"78098765412345678876543456789098768909876545678909876543456789987654345673\"\n    \"99999912319999999999999292929495654732123456782345654334565434565434534543\"\n    \"78098765412345678876543456789098768909876545678909876543456789987654345673\"\n    \"1234567899876543234567890987654345678987654323456789987654321234567898754\";\n    const char * const cb = \/\/drugi vb je negativan\n    \"-45678987654356789876543245678987654323456789765432123456789876543234567654\"\n    \"99999912319999999999999292929495654732123456782345654334565434565434534543\"\n    \"45678987654356789876543245678987654323456789765432123456789876543234567654\"\n    \"45678987654356789876543245678987654323456789765432123456789876543234567654\"\n    \"12439912319999999999999292929495654732123456782345654334565434565434534323\"\n    \"78098765412345678876543456789098768909876545678909876543456789987654345673\"\n    \"12345678998765432345678909876543456789876543234567899876543212345678987654\"\n    \"12439912319999999999999292929495654732123456782345654334565434565434534323\"\n    \"78098765412345678876543456789098768909876545678909876543456789987654345673\"\n    \"45678987654356789876543245678987654323456789765432123456789876543234567654\"\n    \"12345678998765432345678909876543456789876543234567899876543212345678987654\"\n    \"12439912319999999999999292929495654732123456782345654334565434565434534323\"\n    \"78098765412345678876543456789098768909876545678909876543456789987654345673\"\n    \"12345678998765432345678909876543456789876543234567899876543212345678987654\"\n    \"12439912319999999999999292929495654732123456782345654334565434565434534323\"\n    \"12345678998765432345678909876543456789876543234567899876543212345678987654\"\n    \"12439912319999999999999292929495654732123456782345654334565434565434534323\"\n    \"78098765412345678876543456789098768909876545678909876543456789987654345673\"\n    \"45678987654356789876543245678987654323456789765432123456789876543234567654\"\n    \"12345678998765432345678909876543456789876543234567899876543212345678987654\"\n    \"12439912319999999999999292929495654732123456782345654334565434565434534323\"\n    \"78098765412345678876543456789098768909876545678909876543456789987654345673\"\n    \"12345678998765432345678909876543456789876543234567899876543212345678987654\"\n    \"12439912319999999999999292929495654732123456782345654334565434565434534323\"\n    \"78098765412345678876543456789098768909876545678909876543456789987654345673\"\n    \"12439912319999999999999292929495654732123456782345654334565434565434534323\"\n    \"7809876541234567887654345678909876890987654567890987654345678998765434567\";\n    \n    clock_t poc = std::clock();\n    \n    VelikiBroj a (ca), b (cb);\n    VelikiBroj k = a - b;\n    \n    \n    clock_t kraj = std::clock();\n    double proslo = double(kraj - poc) \/ CLOCKS_PER_SEC;\n    std::cout << \"f: \" << k;\n    std::cout << std::endl << \"Vrijeme izvrsavanja: \" << proslo << \"s\" << std::endl;\n    }","global_above_main":"#include <ctime>","global_top":"","running_params":{"timeout":"10","vmem":"1000000","stdin":""},"expected":["fnVrijeme izvrsavanja: "],"expected_exception":"false","expected_crash":"false","ignore_whitespace":"false","regex":"false","substring":"true"},{"id":3567,"require_symbols":[],"replace_symbols":[],"code":"{\/\/ATX (javni): +=\n \nauto A = \n\"923450987654321234567898765432345678765432345678765477777777777777777787687687\"\n\"456348756348756342875634287956348756349534576348563458734265834795634875634879\"\n\"435734658763458734265873465879345634287568342765873456873456348795634587968754\"\n\"534205870874589342758093475893475340895734895734289573489573489570348957348950\"\n\"102938470129834721038947103294871029348710293847120938471209384791328047384793\"\n\"93487103294872309185756348702680932172581327463245632587093265891374328923\"_vb;\nA -=                                    \n\"923450987654321234567898765432345678765432345678765477777777777777777787687687\"\n\"456348756348756342875634287956348756349534576348563458734265834795634875634879\"\n\"435734658763458734265873465879345634287568342765873456873456348795634587968754\"\n\"534205870874589342758093475893475340895734895734289573489573489570348957348950\"\n\"102938470129834721038947103294871029348710293847120938471209384791328047384793\"\n\"93487103294872309185756348702680932172581327463245632787093265891374328923\";\n\nstd::cout << \"A: '\" << std::setw (40) << std::right << A << \"'\" << std::endl;\nstd::cout << \"A: '\" << std::setw (40) << std::left  << A << \"'\" << std::endl;\n\n      \n}","global_above_main":"#include <iomanip>\nVelikiBroj operator \"\" _vb (unsigned long long x) {return x;}\nVelikiBroj operator \"\" _vb (const char * const x, size_t) {return x;}","global_top":"","running_params":{"timeout":"10","vmem":"1000000","stdin":""},"expected":["A: '                  -200000000000000000000'\\nA: '-200000000000000000000                  '"],"expected_exception":"false","expected_crash":"false","ignore_whitespace":"false","regex":"false","substring":"false"},{"id":3568,"require_symbols":[],"replace_symbols":[],"code":"    \/\/include <sstream>\n  {\/\/ATY (javni), op >>\n      std::istringstream s (\"12345678901234567890\");\n      VelikiBroj a;\n      s >> a;\n      std::cout << \"VB: '\" << a << \"'\" << std::endl;\n      s.clear();\n      s.str (\"-123456789000000000000000\");\n      s >> a;\n      std::cout << \"VB: '\" << a << \"'\" << std::endl;\n      s.clear();\n      s.str (\"0000000000000000000000015\");\n      s >> a;\n      std::cout << \"VB: '\" << a << \"'\" << std::endl;\n      s.clear();\n      s.str (\"-0000000000000000000000015\");\n      s >> a;\n      std::cout << \"VB: '\" << a << \"'\" << std::endl;\n      s.clear();\n      s.str (\"+0\");\n      s >> a;\n      std::cout << \"VB: '\" << a << \"'\" << std::endl;\n      s.clear();\n      s.str (\"-0\");\n      s >> a;\n      std::cout << \"VB: '\" << a << \"'\" << std::endl;\n      s.clear();\n      s.str (\"+\");\n      s >> a;\n      std::cout << \"VB: '\" << a << \"'\" << std::endl;\n      s.clear();\n      s.str (\"-\");\n      s >> a;\n      std::cout << \"VB: '\" << a << \"'\" << std::endl;\n      s.clear();\n      s.str (\"0\");\n      s >> a;\n      std::cout << \"VB: '\" << a << \"'\" << std::endl;\n      \/\/ako unosimo int, mozemo ga unijeti npr. \"             15\" i ono ce ispravno procitati 15\n      \/\/to mora vrijediti i ovdje\n      s.clear();\n      s.str (\"                  15\");\n      s >> a;\n      std::cout << \"VB: '\" << a << \"'\" << std::endl;\n      s.clear();\n      s.str (\" 27        \");\n      s >> a;\n      std::cout << \"VB: '\" << a << \"'\" << std::endl;\n      \/\/neispravan unos, ne smije baciti izuzetak nego mora postaviti stanje na neispravno!\n      s.clear();\n      s.str (\"12345678765432*2345678765432567\");\n      s >> a;\n      if (!s) \/\/neispravno stanje, slicno kao if (!std::cin)\n        std::cout << \"OK\" << std::endl;\n      else std::cout << \"NijeOK\" << std::endl;\n      \/\/da vidimo jel \"popraavljivlo\" (mora biti)\n      s.clear();\n      s.str(\"10001\");\n      s >> a;\n      std::cout << \"VB: '\" << a << \"'\" << std::endl;\n      \/\/evo, koji unos sa tastature\n      VelikiBroj b;\n      std::cin >> a >> b;  \/\/unosimo 777 i 77777777777777\n      std::cout << \"a: '\" << a << \"', b: '\" << b << \"'\" << std::endl;\n      std::cout << std::boolalpha << (bool)std::cin << std::endl; \/\/true\n      std::cin >> a; \/\/unosimo 123#456, tj. pogresno\n      std::cout << std::boolalpha << (bool)std::cin << std::endl; \/\/false\n      std::cin.clear(); \/\/da vidimo moze li se ocistiti...\n      std::cin >> a; \/\/unosimo 123, ispravno\n      std::cout << \"a: '\" << a << \"', b: '\" << b << \"'\" << std::endl;\n      \n  }","global_above_main":"#include <sstream>","global_top":"","running_params":{"timeout":"10","vmem":"1000000","stdin":"777 77777777777777\n123#456\n123\n"},"expected":["VB: '12345678901234567890'\\nVB: '-123456789000000000000000'\\nVB: '15'\\nVB: '-15'\\nVB: '0'\\nVB: '0'\\nVB: '0'\\nVB: '0'\\nVB: '0'\\nVB: '15'\\nVB: '27'\\nOK\\nVB: '10001'\\na: '777', b: '77777777777777'\\ntrue\\nfalse\\na: '123', b: '77777777777777'"],"expected_exception":"false","expected_crash":"false","ignore_whitespace":"false","regex":"false","substring":"false"}]}